/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.copyright.rup.works.brocker.thrift.gen;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ThriftWorkCollection implements org.apache.thrift.TBase<ThriftWorkCollection, ThriftWorkCollection._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThriftWorkCollection");

  private static final org.apache.thrift.protocol.TField COLLECTION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("collectionName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField COLLECTION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("collectionType", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DATA_PROVIDER_FIELD_DESC = new org.apache.thrift.protocol.TField("dataProvider", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SUBMITTED_BY_USER_FIELD_DESC = new org.apache.thrift.protocol.TField("submittedByUser", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField SUBMITTED_DATETIME_FIELD_DESC = new org.apache.thrift.protocol.TField("submittedDatetime", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField SUBMITTED_PROCESSED_DATETIME_FIELD_DESC = new org.apache.thrift.protocol.TField("submittedProcessedDatetime", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField CREATE_BY_FILE_SUBMITTED_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("createByFileSubmittedPath", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField CREATE_BYFILE_OS_FILE_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("createByfileOsFilePath", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField IMPORT_FILE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("importFileType", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField IMPORT_FILE_CONTENT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("importFileContentType", org.apache.thrift.protocol.TType.STRING, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ThriftWorkCollectionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ThriftWorkCollectionTupleSchemeFactory());
  }

  public String collectionName; // required
  public String collectionType; // required
  public String dataProvider; // required
  public String submittedByUser; // required
  public String submittedDatetime; // required
  public String submittedProcessedDatetime; // required
  public String createByFileSubmittedPath; // required
  public String createByfileOsFilePath; // required
  public String importFileType; // required
  public String importFileContentType; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COLLECTION_NAME((short)1, "collectionName"),
    COLLECTION_TYPE((short)2, "collectionType"),
    DATA_PROVIDER((short)3, "dataProvider"),
    SUBMITTED_BY_USER((short)4, "submittedByUser"),
    SUBMITTED_DATETIME((short)5, "submittedDatetime"),
    SUBMITTED_PROCESSED_DATETIME((short)6, "submittedProcessedDatetime"),
    CREATE_BY_FILE_SUBMITTED_PATH((short)7, "createByFileSubmittedPath"),
    CREATE_BYFILE_OS_FILE_PATH((short)8, "createByfileOsFilePath"),
    IMPORT_FILE_TYPE((short)9, "importFileType"),
    IMPORT_FILE_CONTENT_TYPE((short)10, "importFileContentType");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COLLECTION_NAME
          return COLLECTION_NAME;
        case 2: // COLLECTION_TYPE
          return COLLECTION_TYPE;
        case 3: // DATA_PROVIDER
          return DATA_PROVIDER;
        case 4: // SUBMITTED_BY_USER
          return SUBMITTED_BY_USER;
        case 5: // SUBMITTED_DATETIME
          return SUBMITTED_DATETIME;
        case 6: // SUBMITTED_PROCESSED_DATETIME
          return SUBMITTED_PROCESSED_DATETIME;
        case 7: // CREATE_BY_FILE_SUBMITTED_PATH
          return CREATE_BY_FILE_SUBMITTED_PATH;
        case 8: // CREATE_BYFILE_OS_FILE_PATH
          return CREATE_BYFILE_OS_FILE_PATH;
        case 9: // IMPORT_FILE_TYPE
          return IMPORT_FILE_TYPE;
        case 10: // IMPORT_FILE_CONTENT_TYPE
          return IMPORT_FILE_CONTENT_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COLLECTION_NAME, new org.apache.thrift.meta_data.FieldMetaData("collectionName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COLLECTION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("collectionType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATA_PROVIDER, new org.apache.thrift.meta_data.FieldMetaData("dataProvider", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUBMITTED_BY_USER, new org.apache.thrift.meta_data.FieldMetaData("submittedByUser", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUBMITTED_DATETIME, new org.apache.thrift.meta_data.FieldMetaData("submittedDatetime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUBMITTED_PROCESSED_DATETIME, new org.apache.thrift.meta_data.FieldMetaData("submittedProcessedDatetime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_BY_FILE_SUBMITTED_PATH, new org.apache.thrift.meta_data.FieldMetaData("createByFileSubmittedPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_BYFILE_OS_FILE_PATH, new org.apache.thrift.meta_data.FieldMetaData("createByfileOsFilePath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IMPORT_FILE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("importFileType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IMPORT_FILE_CONTENT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("importFileContentType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThriftWorkCollection.class, metaDataMap);
  }

  public ThriftWorkCollection() {
  }

  public ThriftWorkCollection(
    String collectionName,
    String collectionType,
    String dataProvider,
    String submittedByUser,
    String submittedDatetime,
    String submittedProcessedDatetime,
    String createByFileSubmittedPath,
    String createByfileOsFilePath,
    String importFileType,
    String importFileContentType)
  {
    this();
    this.collectionName = collectionName;
    this.collectionType = collectionType;
    this.dataProvider = dataProvider;
    this.submittedByUser = submittedByUser;
    this.submittedDatetime = submittedDatetime;
    this.submittedProcessedDatetime = submittedProcessedDatetime;
    this.createByFileSubmittedPath = createByFileSubmittedPath;
    this.createByfileOsFilePath = createByfileOsFilePath;
    this.importFileType = importFileType;
    this.importFileContentType = importFileContentType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ThriftWorkCollection(ThriftWorkCollection other) {
    if (other.isSetCollectionName()) {
      this.collectionName = other.collectionName;
    }
    if (other.isSetCollectionType()) {
      this.collectionType = other.collectionType;
    }
    if (other.isSetDataProvider()) {
      this.dataProvider = other.dataProvider;
    }
    if (other.isSetSubmittedByUser()) {
      this.submittedByUser = other.submittedByUser;
    }
    if (other.isSetSubmittedDatetime()) {
      this.submittedDatetime = other.submittedDatetime;
    }
    if (other.isSetSubmittedProcessedDatetime()) {
      this.submittedProcessedDatetime = other.submittedProcessedDatetime;
    }
    if (other.isSetCreateByFileSubmittedPath()) {
      this.createByFileSubmittedPath = other.createByFileSubmittedPath;
    }
    if (other.isSetCreateByfileOsFilePath()) {
      this.createByfileOsFilePath = other.createByfileOsFilePath;
    }
    if (other.isSetImportFileType()) {
      this.importFileType = other.importFileType;
    }
    if (other.isSetImportFileContentType()) {
      this.importFileContentType = other.importFileContentType;
    }
  }

  public ThriftWorkCollection deepCopy() {
    return new ThriftWorkCollection(this);
  }

  @Override
  public void clear() {
    this.collectionName = null;
    this.collectionType = null;
    this.dataProvider = null;
    this.submittedByUser = null;
    this.submittedDatetime = null;
    this.submittedProcessedDatetime = null;
    this.createByFileSubmittedPath = null;
    this.createByfileOsFilePath = null;
    this.importFileType = null;
    this.importFileContentType = null;
  }

  public String getCollectionName() {
    return this.collectionName;
  }

  public ThriftWorkCollection setCollectionName(String collectionName) {
    this.collectionName = collectionName;
    return this;
  }

  public void unsetCollectionName() {
    this.collectionName = null;
  }

  /** Returns true if field collectionName is set (has been assigned a value) and false otherwise */
  public boolean isSetCollectionName() {
    return this.collectionName != null;
  }

  public void setCollectionNameIsSet(boolean value) {
    if (!value) {
      this.collectionName = null;
    }
  }

  public String getCollectionType() {
    return this.collectionType;
  }

  public ThriftWorkCollection setCollectionType(String collectionType) {
    this.collectionType = collectionType;
    return this;
  }

  public void unsetCollectionType() {
    this.collectionType = null;
  }

  /** Returns true if field collectionType is set (has been assigned a value) and false otherwise */
  public boolean isSetCollectionType() {
    return this.collectionType != null;
  }

  public void setCollectionTypeIsSet(boolean value) {
    if (!value) {
      this.collectionType = null;
    }
  }

  public String getDataProvider() {
    return this.dataProvider;
  }

  public ThriftWorkCollection setDataProvider(String dataProvider) {
    this.dataProvider = dataProvider;
    return this;
  }

  public void unsetDataProvider() {
    this.dataProvider = null;
  }

  /** Returns true if field dataProvider is set (has been assigned a value) and false otherwise */
  public boolean isSetDataProvider() {
    return this.dataProvider != null;
  }

  public void setDataProviderIsSet(boolean value) {
    if (!value) {
      this.dataProvider = null;
    }
  }

  public String getSubmittedByUser() {
    return this.submittedByUser;
  }

  public ThriftWorkCollection setSubmittedByUser(String submittedByUser) {
    this.submittedByUser = submittedByUser;
    return this;
  }

  public void unsetSubmittedByUser() {
    this.submittedByUser = null;
  }

  /** Returns true if field submittedByUser is set (has been assigned a value) and false otherwise */
  public boolean isSetSubmittedByUser() {
    return this.submittedByUser != null;
  }

  public void setSubmittedByUserIsSet(boolean value) {
    if (!value) {
      this.submittedByUser = null;
    }
  }

  public String getSubmittedDatetime() {
    return this.submittedDatetime;
  }

  public ThriftWorkCollection setSubmittedDatetime(String submittedDatetime) {
    this.submittedDatetime = submittedDatetime;
    return this;
  }

  public void unsetSubmittedDatetime() {
    this.submittedDatetime = null;
  }

  /** Returns true if field submittedDatetime is set (has been assigned a value) and false otherwise */
  public boolean isSetSubmittedDatetime() {
    return this.submittedDatetime != null;
  }

  public void setSubmittedDatetimeIsSet(boolean value) {
    if (!value) {
      this.submittedDatetime = null;
    }
  }

  public String getSubmittedProcessedDatetime() {
    return this.submittedProcessedDatetime;
  }

  public ThriftWorkCollection setSubmittedProcessedDatetime(String submittedProcessedDatetime) {
    this.submittedProcessedDatetime = submittedProcessedDatetime;
    return this;
  }

  public void unsetSubmittedProcessedDatetime() {
    this.submittedProcessedDatetime = null;
  }

  /** Returns true if field submittedProcessedDatetime is set (has been assigned a value) and false otherwise */
  public boolean isSetSubmittedProcessedDatetime() {
    return this.submittedProcessedDatetime != null;
  }

  public void setSubmittedProcessedDatetimeIsSet(boolean value) {
    if (!value) {
      this.submittedProcessedDatetime = null;
    }
  }

  public String getCreateByFileSubmittedPath() {
    return this.createByFileSubmittedPath;
  }

  public ThriftWorkCollection setCreateByFileSubmittedPath(String createByFileSubmittedPath) {
    this.createByFileSubmittedPath = createByFileSubmittedPath;
    return this;
  }

  public void unsetCreateByFileSubmittedPath() {
    this.createByFileSubmittedPath = null;
  }

  /** Returns true if field createByFileSubmittedPath is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateByFileSubmittedPath() {
    return this.createByFileSubmittedPath != null;
  }

  public void setCreateByFileSubmittedPathIsSet(boolean value) {
    if (!value) {
      this.createByFileSubmittedPath = null;
    }
  }

  public String getCreateByfileOsFilePath() {
    return this.createByfileOsFilePath;
  }

  public ThriftWorkCollection setCreateByfileOsFilePath(String createByfileOsFilePath) {
    this.createByfileOsFilePath = createByfileOsFilePath;
    return this;
  }

  public void unsetCreateByfileOsFilePath() {
    this.createByfileOsFilePath = null;
  }

  /** Returns true if field createByfileOsFilePath is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateByfileOsFilePath() {
    return this.createByfileOsFilePath != null;
  }

  public void setCreateByfileOsFilePathIsSet(boolean value) {
    if (!value) {
      this.createByfileOsFilePath = null;
    }
  }

  public String getImportFileType() {
    return this.importFileType;
  }

  public ThriftWorkCollection setImportFileType(String importFileType) {
    this.importFileType = importFileType;
    return this;
  }

  public void unsetImportFileType() {
    this.importFileType = null;
  }

  /** Returns true if field importFileType is set (has been assigned a value) and false otherwise */
  public boolean isSetImportFileType() {
    return this.importFileType != null;
  }

  public void setImportFileTypeIsSet(boolean value) {
    if (!value) {
      this.importFileType = null;
    }
  }

  public String getImportFileContentType() {
    return this.importFileContentType;
  }

  public ThriftWorkCollection setImportFileContentType(String importFileContentType) {
    this.importFileContentType = importFileContentType;
    return this;
  }

  public void unsetImportFileContentType() {
    this.importFileContentType = null;
  }

  /** Returns true if field importFileContentType is set (has been assigned a value) and false otherwise */
  public boolean isSetImportFileContentType() {
    return this.importFileContentType != null;
  }

  public void setImportFileContentTypeIsSet(boolean value) {
    if (!value) {
      this.importFileContentType = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COLLECTION_NAME:
      if (value == null) {
        unsetCollectionName();
      } else {
        setCollectionName((String)value);
      }
      break;

    case COLLECTION_TYPE:
      if (value == null) {
        unsetCollectionType();
      } else {
        setCollectionType((String)value);
      }
      break;

    case DATA_PROVIDER:
      if (value == null) {
        unsetDataProvider();
      } else {
        setDataProvider((String)value);
      }
      break;

    case SUBMITTED_BY_USER:
      if (value == null) {
        unsetSubmittedByUser();
      } else {
        setSubmittedByUser((String)value);
      }
      break;

    case SUBMITTED_DATETIME:
      if (value == null) {
        unsetSubmittedDatetime();
      } else {
        setSubmittedDatetime((String)value);
      }
      break;

    case SUBMITTED_PROCESSED_DATETIME:
      if (value == null) {
        unsetSubmittedProcessedDatetime();
      } else {
        setSubmittedProcessedDatetime((String)value);
      }
      break;

    case CREATE_BY_FILE_SUBMITTED_PATH:
      if (value == null) {
        unsetCreateByFileSubmittedPath();
      } else {
        setCreateByFileSubmittedPath((String)value);
      }
      break;

    case CREATE_BYFILE_OS_FILE_PATH:
      if (value == null) {
        unsetCreateByfileOsFilePath();
      } else {
        setCreateByfileOsFilePath((String)value);
      }
      break;

    case IMPORT_FILE_TYPE:
      if (value == null) {
        unsetImportFileType();
      } else {
        setImportFileType((String)value);
      }
      break;

    case IMPORT_FILE_CONTENT_TYPE:
      if (value == null) {
        unsetImportFileContentType();
      } else {
        setImportFileContentType((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COLLECTION_NAME:
      return getCollectionName();

    case COLLECTION_TYPE:
      return getCollectionType();

    case DATA_PROVIDER:
      return getDataProvider();

    case SUBMITTED_BY_USER:
      return getSubmittedByUser();

    case SUBMITTED_DATETIME:
      return getSubmittedDatetime();

    case SUBMITTED_PROCESSED_DATETIME:
      return getSubmittedProcessedDatetime();

    case CREATE_BY_FILE_SUBMITTED_PATH:
      return getCreateByFileSubmittedPath();

    case CREATE_BYFILE_OS_FILE_PATH:
      return getCreateByfileOsFilePath();

    case IMPORT_FILE_TYPE:
      return getImportFileType();

    case IMPORT_FILE_CONTENT_TYPE:
      return getImportFileContentType();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COLLECTION_NAME:
      return isSetCollectionName();
    case COLLECTION_TYPE:
      return isSetCollectionType();
    case DATA_PROVIDER:
      return isSetDataProvider();
    case SUBMITTED_BY_USER:
      return isSetSubmittedByUser();
    case SUBMITTED_DATETIME:
      return isSetSubmittedDatetime();
    case SUBMITTED_PROCESSED_DATETIME:
      return isSetSubmittedProcessedDatetime();
    case CREATE_BY_FILE_SUBMITTED_PATH:
      return isSetCreateByFileSubmittedPath();
    case CREATE_BYFILE_OS_FILE_PATH:
      return isSetCreateByfileOsFilePath();
    case IMPORT_FILE_TYPE:
      return isSetImportFileType();
    case IMPORT_FILE_CONTENT_TYPE:
      return isSetImportFileContentType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ThriftWorkCollection)
      return this.equals((ThriftWorkCollection)that);
    return false;
  }

  public boolean equals(ThriftWorkCollection that) {
    if (that == null)
      return false;

    boolean this_present_collectionName = true && this.isSetCollectionName();
    boolean that_present_collectionName = true && that.isSetCollectionName();
    if (this_present_collectionName || that_present_collectionName) {
      if (!(this_present_collectionName && that_present_collectionName))
        return false;
      if (!this.collectionName.equals(that.collectionName))
        return false;
    }

    boolean this_present_collectionType = true && this.isSetCollectionType();
    boolean that_present_collectionType = true && that.isSetCollectionType();
    if (this_present_collectionType || that_present_collectionType) {
      if (!(this_present_collectionType && that_present_collectionType))
        return false;
      if (!this.collectionType.equals(that.collectionType))
        return false;
    }

    boolean this_present_dataProvider = true && this.isSetDataProvider();
    boolean that_present_dataProvider = true && that.isSetDataProvider();
    if (this_present_dataProvider || that_present_dataProvider) {
      if (!(this_present_dataProvider && that_present_dataProvider))
        return false;
      if (!this.dataProvider.equals(that.dataProvider))
        return false;
    }

    boolean this_present_submittedByUser = true && this.isSetSubmittedByUser();
    boolean that_present_submittedByUser = true && that.isSetSubmittedByUser();
    if (this_present_submittedByUser || that_present_submittedByUser) {
      if (!(this_present_submittedByUser && that_present_submittedByUser))
        return false;
      if (!this.submittedByUser.equals(that.submittedByUser))
        return false;
    }

    boolean this_present_submittedDatetime = true && this.isSetSubmittedDatetime();
    boolean that_present_submittedDatetime = true && that.isSetSubmittedDatetime();
    if (this_present_submittedDatetime || that_present_submittedDatetime) {
      if (!(this_present_submittedDatetime && that_present_submittedDatetime))
        return false;
      if (!this.submittedDatetime.equals(that.submittedDatetime))
        return false;
    }

    boolean this_present_submittedProcessedDatetime = true && this.isSetSubmittedProcessedDatetime();
    boolean that_present_submittedProcessedDatetime = true && that.isSetSubmittedProcessedDatetime();
    if (this_present_submittedProcessedDatetime || that_present_submittedProcessedDatetime) {
      if (!(this_present_submittedProcessedDatetime && that_present_submittedProcessedDatetime))
        return false;
      if (!this.submittedProcessedDatetime.equals(that.submittedProcessedDatetime))
        return false;
    }

    boolean this_present_createByFileSubmittedPath = true && this.isSetCreateByFileSubmittedPath();
    boolean that_present_createByFileSubmittedPath = true && that.isSetCreateByFileSubmittedPath();
    if (this_present_createByFileSubmittedPath || that_present_createByFileSubmittedPath) {
      if (!(this_present_createByFileSubmittedPath && that_present_createByFileSubmittedPath))
        return false;
      if (!this.createByFileSubmittedPath.equals(that.createByFileSubmittedPath))
        return false;
    }

    boolean this_present_createByfileOsFilePath = true && this.isSetCreateByfileOsFilePath();
    boolean that_present_createByfileOsFilePath = true && that.isSetCreateByfileOsFilePath();
    if (this_present_createByfileOsFilePath || that_present_createByfileOsFilePath) {
      if (!(this_present_createByfileOsFilePath && that_present_createByfileOsFilePath))
        return false;
      if (!this.createByfileOsFilePath.equals(that.createByfileOsFilePath))
        return false;
    }

    boolean this_present_importFileType = true && this.isSetImportFileType();
    boolean that_present_importFileType = true && that.isSetImportFileType();
    if (this_present_importFileType || that_present_importFileType) {
      if (!(this_present_importFileType && that_present_importFileType))
        return false;
      if (!this.importFileType.equals(that.importFileType))
        return false;
    }

    boolean this_present_importFileContentType = true && this.isSetImportFileContentType();
    boolean that_present_importFileContentType = true && that.isSetImportFileContentType();
    if (this_present_importFileContentType || that_present_importFileContentType) {
      if (!(this_present_importFileContentType && that_present_importFileContentType))
        return false;
      if (!this.importFileContentType.equals(that.importFileContentType))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_collectionName = true && (isSetCollectionName());
    builder.append(present_collectionName);
    if (present_collectionName)
      builder.append(collectionName);

    boolean present_collectionType = true && (isSetCollectionType());
    builder.append(present_collectionType);
    if (present_collectionType)
      builder.append(collectionType);

    boolean present_dataProvider = true && (isSetDataProvider());
    builder.append(present_dataProvider);
    if (present_dataProvider)
      builder.append(dataProvider);

    boolean present_submittedByUser = true && (isSetSubmittedByUser());
    builder.append(present_submittedByUser);
    if (present_submittedByUser)
      builder.append(submittedByUser);

    boolean present_submittedDatetime = true && (isSetSubmittedDatetime());
    builder.append(present_submittedDatetime);
    if (present_submittedDatetime)
      builder.append(submittedDatetime);

    boolean present_submittedProcessedDatetime = true && (isSetSubmittedProcessedDatetime());
    builder.append(present_submittedProcessedDatetime);
    if (present_submittedProcessedDatetime)
      builder.append(submittedProcessedDatetime);

    boolean present_createByFileSubmittedPath = true && (isSetCreateByFileSubmittedPath());
    builder.append(present_createByFileSubmittedPath);
    if (present_createByFileSubmittedPath)
      builder.append(createByFileSubmittedPath);

    boolean present_createByfileOsFilePath = true && (isSetCreateByfileOsFilePath());
    builder.append(present_createByfileOsFilePath);
    if (present_createByfileOsFilePath)
      builder.append(createByfileOsFilePath);

    boolean present_importFileType = true && (isSetImportFileType());
    builder.append(present_importFileType);
    if (present_importFileType)
      builder.append(importFileType);

    boolean present_importFileContentType = true && (isSetImportFileContentType());
    builder.append(present_importFileContentType);
    if (present_importFileContentType)
      builder.append(importFileContentType);

    return builder.toHashCode();
  }

  public int compareTo(ThriftWorkCollection other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ThriftWorkCollection typedOther = (ThriftWorkCollection)other;

    lastComparison = Boolean.valueOf(isSetCollectionName()).compareTo(typedOther.isSetCollectionName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCollectionName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collectionName, typedOther.collectionName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCollectionType()).compareTo(typedOther.isSetCollectionType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCollectionType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collectionType, typedOther.collectionType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDataProvider()).compareTo(typedOther.isSetDataProvider());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDataProvider()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataProvider, typedOther.dataProvider);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubmittedByUser()).compareTo(typedOther.isSetSubmittedByUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubmittedByUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.submittedByUser, typedOther.submittedByUser);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubmittedDatetime()).compareTo(typedOther.isSetSubmittedDatetime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubmittedDatetime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.submittedDatetime, typedOther.submittedDatetime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubmittedProcessedDatetime()).compareTo(typedOther.isSetSubmittedProcessedDatetime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubmittedProcessedDatetime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.submittedProcessedDatetime, typedOther.submittedProcessedDatetime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateByFileSubmittedPath()).compareTo(typedOther.isSetCreateByFileSubmittedPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateByFileSubmittedPath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createByFileSubmittedPath, typedOther.createByFileSubmittedPath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateByfileOsFilePath()).compareTo(typedOther.isSetCreateByfileOsFilePath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateByfileOsFilePath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createByfileOsFilePath, typedOther.createByfileOsFilePath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImportFileType()).compareTo(typedOther.isSetImportFileType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImportFileType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.importFileType, typedOther.importFileType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImportFileContentType()).compareTo(typedOther.isSetImportFileContentType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImportFileContentType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.importFileContentType, typedOther.importFileContentType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ThriftWorkCollection(");
    boolean first = true;

    sb.append("collectionName:");
    if (this.collectionName == null) {
      sb.append("null");
    } else {
      sb.append(this.collectionName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("collectionType:");
    if (this.collectionType == null) {
      sb.append("null");
    } else {
      sb.append(this.collectionType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dataProvider:");
    if (this.dataProvider == null) {
      sb.append("null");
    } else {
      sb.append(this.dataProvider);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("submittedByUser:");
    if (this.submittedByUser == null) {
      sb.append("null");
    } else {
      sb.append(this.submittedByUser);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("submittedDatetime:");
    if (this.submittedDatetime == null) {
      sb.append("null");
    } else {
      sb.append(this.submittedDatetime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("submittedProcessedDatetime:");
    if (this.submittedProcessedDatetime == null) {
      sb.append("null");
    } else {
      sb.append(this.submittedProcessedDatetime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createByFileSubmittedPath:");
    if (this.createByFileSubmittedPath == null) {
      sb.append("null");
    } else {
      sb.append(this.createByFileSubmittedPath);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createByfileOsFilePath:");
    if (this.createByfileOsFilePath == null) {
      sb.append("null");
    } else {
      sb.append(this.createByfileOsFilePath);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("importFileType:");
    if (this.importFileType == null) {
      sb.append("null");
    } else {
      sb.append(this.importFileType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("importFileContentType:");
    if (this.importFileContentType == null) {
      sb.append("null");
    } else {
      sb.append(this.importFileContentType);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ThriftWorkCollectionStandardSchemeFactory implements SchemeFactory {
    public ThriftWorkCollectionStandardScheme getScheme() {
      return new ThriftWorkCollectionStandardScheme();
    }
  }

  private static class ThriftWorkCollectionStandardScheme extends StandardScheme<ThriftWorkCollection> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ThriftWorkCollection struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COLLECTION_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.collectionName = iprot.readString();
              struct.setCollectionNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COLLECTION_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.collectionType = iprot.readString();
              struct.setCollectionTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DATA_PROVIDER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dataProvider = iprot.readString();
              struct.setDataProviderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SUBMITTED_BY_USER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.submittedByUser = iprot.readString();
              struct.setSubmittedByUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SUBMITTED_DATETIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.submittedDatetime = iprot.readString();
              struct.setSubmittedDatetimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SUBMITTED_PROCESSED_DATETIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.submittedProcessedDatetime = iprot.readString();
              struct.setSubmittedProcessedDatetimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CREATE_BY_FILE_SUBMITTED_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createByFileSubmittedPath = iprot.readString();
              struct.setCreateByFileSubmittedPathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CREATE_BYFILE_OS_FILE_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createByfileOsFilePath = iprot.readString();
              struct.setCreateByfileOsFilePathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // IMPORT_FILE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.importFileType = iprot.readString();
              struct.setImportFileTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // IMPORT_FILE_CONTENT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.importFileContentType = iprot.readString();
              struct.setImportFileContentTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ThriftWorkCollection struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.collectionName != null) {
        oprot.writeFieldBegin(COLLECTION_NAME_FIELD_DESC);
        oprot.writeString(struct.collectionName);
        oprot.writeFieldEnd();
      }
      if (struct.collectionType != null) {
        oprot.writeFieldBegin(COLLECTION_TYPE_FIELD_DESC);
        oprot.writeString(struct.collectionType);
        oprot.writeFieldEnd();
      }
      if (struct.dataProvider != null) {
        oprot.writeFieldBegin(DATA_PROVIDER_FIELD_DESC);
        oprot.writeString(struct.dataProvider);
        oprot.writeFieldEnd();
      }
      if (struct.submittedByUser != null) {
        oprot.writeFieldBegin(SUBMITTED_BY_USER_FIELD_DESC);
        oprot.writeString(struct.submittedByUser);
        oprot.writeFieldEnd();
      }
      if (struct.submittedDatetime != null) {
        oprot.writeFieldBegin(SUBMITTED_DATETIME_FIELD_DESC);
        oprot.writeString(struct.submittedDatetime);
        oprot.writeFieldEnd();
      }
      if (struct.submittedProcessedDatetime != null) {
        oprot.writeFieldBegin(SUBMITTED_PROCESSED_DATETIME_FIELD_DESC);
        oprot.writeString(struct.submittedProcessedDatetime);
        oprot.writeFieldEnd();
      }
      if (struct.createByFileSubmittedPath != null) {
        oprot.writeFieldBegin(CREATE_BY_FILE_SUBMITTED_PATH_FIELD_DESC);
        oprot.writeString(struct.createByFileSubmittedPath);
        oprot.writeFieldEnd();
      }
      if (struct.createByfileOsFilePath != null) {
        oprot.writeFieldBegin(CREATE_BYFILE_OS_FILE_PATH_FIELD_DESC);
        oprot.writeString(struct.createByfileOsFilePath);
        oprot.writeFieldEnd();
      }
      if (struct.importFileType != null) {
        oprot.writeFieldBegin(IMPORT_FILE_TYPE_FIELD_DESC);
        oprot.writeString(struct.importFileType);
        oprot.writeFieldEnd();
      }
      if (struct.importFileContentType != null) {
        oprot.writeFieldBegin(IMPORT_FILE_CONTENT_TYPE_FIELD_DESC);
        oprot.writeString(struct.importFileContentType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ThriftWorkCollectionTupleSchemeFactory implements SchemeFactory {
    public ThriftWorkCollectionTupleScheme getScheme() {
      return new ThriftWorkCollectionTupleScheme();
    }
  }

  private static class ThriftWorkCollectionTupleScheme extends TupleScheme<ThriftWorkCollection> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ThriftWorkCollection struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCollectionName()) {
        optionals.set(0);
      }
      if (struct.isSetCollectionType()) {
        optionals.set(1);
      }
      if (struct.isSetDataProvider()) {
        optionals.set(2);
      }
      if (struct.isSetSubmittedByUser()) {
        optionals.set(3);
      }
      if (struct.isSetSubmittedDatetime()) {
        optionals.set(4);
      }
      if (struct.isSetSubmittedProcessedDatetime()) {
        optionals.set(5);
      }
      if (struct.isSetCreateByFileSubmittedPath()) {
        optionals.set(6);
      }
      if (struct.isSetCreateByfileOsFilePath()) {
        optionals.set(7);
      }
      if (struct.isSetImportFileType()) {
        optionals.set(8);
      }
      if (struct.isSetImportFileContentType()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetCollectionName()) {
        oprot.writeString(struct.collectionName);
      }
      if (struct.isSetCollectionType()) {
        oprot.writeString(struct.collectionType);
      }
      if (struct.isSetDataProvider()) {
        oprot.writeString(struct.dataProvider);
      }
      if (struct.isSetSubmittedByUser()) {
        oprot.writeString(struct.submittedByUser);
      }
      if (struct.isSetSubmittedDatetime()) {
        oprot.writeString(struct.submittedDatetime);
      }
      if (struct.isSetSubmittedProcessedDatetime()) {
        oprot.writeString(struct.submittedProcessedDatetime);
      }
      if (struct.isSetCreateByFileSubmittedPath()) {
        oprot.writeString(struct.createByFileSubmittedPath);
      }
      if (struct.isSetCreateByfileOsFilePath()) {
        oprot.writeString(struct.createByfileOsFilePath);
      }
      if (struct.isSetImportFileType()) {
        oprot.writeString(struct.importFileType);
      }
      if (struct.isSetImportFileContentType()) {
        oprot.writeString(struct.importFileContentType);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ThriftWorkCollection struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.collectionName = iprot.readString();
        struct.setCollectionNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.collectionType = iprot.readString();
        struct.setCollectionTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.dataProvider = iprot.readString();
        struct.setDataProviderIsSet(true);
      }
      if (incoming.get(3)) {
        struct.submittedByUser = iprot.readString();
        struct.setSubmittedByUserIsSet(true);
      }
      if (incoming.get(4)) {
        struct.submittedDatetime = iprot.readString();
        struct.setSubmittedDatetimeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.submittedProcessedDatetime = iprot.readString();
        struct.setSubmittedProcessedDatetimeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.createByFileSubmittedPath = iprot.readString();
        struct.setCreateByFileSubmittedPathIsSet(true);
      }
      if (incoming.get(7)) {
        struct.createByfileOsFilePath = iprot.readString();
        struct.setCreateByfileOsFilePathIsSet(true);
      }
      if (incoming.get(8)) {
        struct.importFileType = iprot.readString();
        struct.setImportFileTypeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.importFileContentType = iprot.readString();
        struct.setImportFileContentTypeIsSet(true);
      }
    }
  }

}

