/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.copyright.rup.works.brocker.thrift.gen;

import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

/**
 * Work
 */
public class WorkDto implements org.apache.thrift.TBase<WorkDto, WorkDto._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("WorkDto");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField LANGUAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("language", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PUBLICATION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("publicationType", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PUBLICATION_COUNTRY_FIELD_DESC = new org.apache.thrift.protocol.TField("publicationCountry", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField SUBJECT_FIELD_DESC = new org.apache.thrift.protocol.TField("subject", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField TITLES_FIELD_DESC = new org.apache.thrift.protocol.TField("titles", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new WorkDtoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new WorkDtoTupleSchemeFactory());
  }

  public String id; // required
  public String language; // required
  public String publicationType; // required
  public String publicationCountry; // required
  public String subject; // required
  public String titles; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    LANGUAGE((short)2, "language"),
    PUBLICATION_TYPE((short)3, "publicationType"),
    PUBLICATION_COUNTRY((short)4, "publicationCountry"),
    SUBJECT((short)5, "subject"),
    TITLES((short)6, "titles");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // LANGUAGE
          return LANGUAGE;
        case 3: // PUBLICATION_TYPE
          return PUBLICATION_TYPE;
        case 4: // PUBLICATION_COUNTRY
          return PUBLICATION_COUNTRY;
        case 5: // SUBJECT
          return SUBJECT;
        case 6: // TITLES
          return TITLES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LANGUAGE, new org.apache.thrift.meta_data.FieldMetaData("language", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PUBLICATION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("publicationType", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PUBLICATION_COUNTRY, new org.apache.thrift.meta_data.FieldMetaData("publicationCountry", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUBJECT, new org.apache.thrift.meta_data.FieldMetaData("subject", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TITLES, new org.apache.thrift.meta_data.FieldMetaData("titles", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(WorkDto.class, metaDataMap);
  }

  public WorkDto() {
  }

  public WorkDto(
    String id,
    String language,
    String publicationType,
    String publicationCountry,
    String subject,
    String titles)
  {
    this();
    this.id = id;
    this.language = language;
    this.publicationType = publicationType;
    this.publicationCountry = publicationCountry;
    this.subject = subject;
    this.titles = titles;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public WorkDto(WorkDto other) {
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetLanguage()) {
      this.language = other.language;
    }
    if (other.isSetPublicationType()) {
      this.publicationType = other.publicationType;
    }
    if (other.isSetPublicationCountry()) {
      this.publicationCountry = other.publicationCountry;
    }
    if (other.isSetSubject()) {
      this.subject = other.subject;
    }
    if (other.isSetTitles()) {
      this.titles = other.titles;
    }
  }

  public WorkDto deepCopy() {
    return new WorkDto(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.language = null;
    this.publicationType = null;
    this.publicationCountry = null;
    this.subject = null;
    this.titles = null;
  }

  public String getId() {
    return this.id;
  }

  public WorkDto setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public String getLanguage() {
    return this.language;
  }

  public WorkDto setLanguage(String language) {
    this.language = language;
    return this;
  }

  public void unsetLanguage() {
    this.language = null;
  }

  /** Returns true if field language is set (has been assigned a value) and false otherwise */
  public boolean isSetLanguage() {
    return this.language != null;
  }

  public void setLanguageIsSet(boolean value) {
    if (!value) {
      this.language = null;
    }
  }

  public String getPublicationType() {
    return this.publicationType;
  }

  public WorkDto setPublicationType(String publicationType) {
    this.publicationType = publicationType;
    return this;
  }

  public void unsetPublicationType() {
    this.publicationType = null;
  }

  /** Returns true if field publicationType is set (has been assigned a value) and false otherwise */
  public boolean isSetPublicationType() {
    return this.publicationType != null;
  }

  public void setPublicationTypeIsSet(boolean value) {
    if (!value) {
      this.publicationType = null;
    }
  }

  public String getPublicationCountry() {
    return this.publicationCountry;
  }

  public WorkDto setPublicationCountry(String publicationCountry) {
    this.publicationCountry = publicationCountry;
    return this;
  }

  public void unsetPublicationCountry() {
    this.publicationCountry = null;
  }

  /** Returns true if field publicationCountry is set (has been assigned a value) and false otherwise */
  public boolean isSetPublicationCountry() {
    return this.publicationCountry != null;
  }

  public void setPublicationCountryIsSet(boolean value) {
    if (!value) {
      this.publicationCountry = null;
    }
  }

  public String getSubject() {
    return this.subject;
  }

  public WorkDto setSubject(String subject) {
    this.subject = subject;
    return this;
  }

  public void unsetSubject() {
    this.subject = null;
  }

  /** Returns true if field subject is set (has been assigned a value) and false otherwise */
  public boolean isSetSubject() {
    return this.subject != null;
  }

  public void setSubjectIsSet(boolean value) {
    if (!value) {
      this.subject = null;
    }
  }

  public String getTitles() {
    return this.titles;
  }

  public WorkDto setTitles(String titles) {
    this.titles = titles;
    return this;
  }

  public void unsetTitles() {
    this.titles = null;
  }

  /** Returns true if field titles is set (has been assigned a value) and false otherwise */
  public boolean isSetTitles() {
    return this.titles != null;
  }

  public void setTitlesIsSet(boolean value) {
    if (!value) {
      this.titles = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case LANGUAGE:
      if (value == null) {
        unsetLanguage();
      } else {
        setLanguage((String)value);
      }
      break;

    case PUBLICATION_TYPE:
      if (value == null) {
        unsetPublicationType();
      } else {
        setPublicationType((String)value);
      }
      break;

    case PUBLICATION_COUNTRY:
      if (value == null) {
        unsetPublicationCountry();
      } else {
        setPublicationCountry((String)value);
      }
      break;

    case SUBJECT:
      if (value == null) {
        unsetSubject();
      } else {
        setSubject((String)value);
      }
      break;

    case TITLES:
      if (value == null) {
        unsetTitles();
      } else {
        setTitles((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case LANGUAGE:
      return getLanguage();

    case PUBLICATION_TYPE:
      return getPublicationType();

    case PUBLICATION_COUNTRY:
      return getPublicationCountry();

    case SUBJECT:
      return getSubject();

    case TITLES:
      return getTitles();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case LANGUAGE:
      return isSetLanguage();
    case PUBLICATION_TYPE:
      return isSetPublicationType();
    case PUBLICATION_COUNTRY:
      return isSetPublicationCountry();
    case SUBJECT:
      return isSetSubject();
    case TITLES:
      return isSetTitles();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof WorkDto)
      return this.equals((WorkDto)that);
    return false;
  }

  public boolean equals(WorkDto that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_language = true && this.isSetLanguage();
    boolean that_present_language = true && that.isSetLanguage();
    if (this_present_language || that_present_language) {
      if (!(this_present_language && that_present_language))
        return false;
      if (!this.language.equals(that.language))
        return false;
    }

    boolean this_present_publicationType = true && this.isSetPublicationType();
    boolean that_present_publicationType = true && that.isSetPublicationType();
    if (this_present_publicationType || that_present_publicationType) {
      if (!(this_present_publicationType && that_present_publicationType))
        return false;
      if (!this.publicationType.equals(that.publicationType))
        return false;
    }

    boolean this_present_publicationCountry = true && this.isSetPublicationCountry();
    boolean that_present_publicationCountry = true && that.isSetPublicationCountry();
    if (this_present_publicationCountry || that_present_publicationCountry) {
      if (!(this_present_publicationCountry && that_present_publicationCountry))
        return false;
      if (!this.publicationCountry.equals(that.publicationCountry))
        return false;
    }

    boolean this_present_subject = true && this.isSetSubject();
    boolean that_present_subject = true && that.isSetSubject();
    if (this_present_subject || that_present_subject) {
      if (!(this_present_subject && that_present_subject))
        return false;
      if (!this.subject.equals(that.subject))
        return false;
    }

    boolean this_present_titles = true && this.isSetTitles();
    boolean that_present_titles = true && that.isSetTitles();
    if (this_present_titles || that_present_titles) {
      if (!(this_present_titles && that_present_titles))
        return false;
      if (!this.titles.equals(that.titles))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_id = true && (isSetId());
    builder.append(present_id);
    if (present_id)
      builder.append(id);

    boolean present_language = true && (isSetLanguage());
    builder.append(present_language);
    if (present_language)
      builder.append(language);

    boolean present_publicationType = true && (isSetPublicationType());
    builder.append(present_publicationType);
    if (present_publicationType)
      builder.append(publicationType);

    boolean present_publicationCountry = true && (isSetPublicationCountry());
    builder.append(present_publicationCountry);
    if (present_publicationCountry)
      builder.append(publicationCountry);

    boolean present_subject = true && (isSetSubject());
    builder.append(present_subject);
    if (present_subject)
      builder.append(subject);

    boolean present_titles = true && (isSetTitles());
    builder.append(present_titles);
    if (present_titles)
      builder.append(titles);

    return builder.toHashCode();
  }

  public int compareTo(WorkDto other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    WorkDto typedOther = other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLanguage()).compareTo(typedOther.isSetLanguage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLanguage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.language, typedOther.language);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPublicationType()).compareTo(typedOther.isSetPublicationType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPublicationType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.publicationType, typedOther.publicationType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPublicationCountry()).compareTo(typedOther.isSetPublicationCountry());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPublicationCountry()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.publicationCountry, typedOther.publicationCountry);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubject()).compareTo(typedOther.isSetSubject());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubject()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subject, typedOther.subject);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitles()).compareTo(typedOther.isSetTitles());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitles()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.titles, typedOther.titles);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("WorkDto(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("language:");
    if (this.language == null) {
      sb.append("null");
    } else {
      sb.append(this.language);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("publicationType:");
    if (this.publicationType == null) {
      sb.append("null");
    } else {
      sb.append(this.publicationType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("publicationCountry:");
    if (this.publicationCountry == null) {
      sb.append("null");
    } else {
      sb.append(this.publicationCountry);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("subject:");
    if (this.subject == null) {
      sb.append("null");
    } else {
      sb.append(this.subject);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("titles:");
    if (this.titles == null) {
      sb.append("null");
    } else {
      sb.append(this.titles);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class WorkDtoStandardSchemeFactory implements SchemeFactory {
    public WorkDtoStandardScheme getScheme() {
      return new WorkDtoStandardScheme();
    }
  }

  private static class WorkDtoStandardScheme extends StandardScheme<WorkDto> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, WorkDto struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LANGUAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.language = iprot.readString();
              struct.setLanguageIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PUBLICATION_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.publicationType = iprot.readString();
              struct.setPublicationTypeIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PUBLICATION_COUNTRY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.publicationCountry = iprot.readString();
              struct.setPublicationCountryIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SUBJECT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.subject = iprot.readString();
              struct.setSubjectIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TITLES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.titles = iprot.readString();
              struct.setTitlesIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, WorkDto struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.language != null) {
        oprot.writeFieldBegin(LANGUAGE_FIELD_DESC);
        oprot.writeString(struct.language);
        oprot.writeFieldEnd();
      }
      if (struct.publicationType != null) {
        oprot.writeFieldBegin(PUBLICATION_TYPE_FIELD_DESC);
        oprot.writeString(struct.publicationType);
        oprot.writeFieldEnd();
      }
      if (struct.publicationCountry != null) {
        oprot.writeFieldBegin(PUBLICATION_COUNTRY_FIELD_DESC);
        oprot.writeString(struct.publicationCountry);
        oprot.writeFieldEnd();
      }
      if (struct.subject != null) {
        oprot.writeFieldBegin(SUBJECT_FIELD_DESC);
        oprot.writeString(struct.subject);
        oprot.writeFieldEnd();
      }
      if (struct.titles != null) {
        oprot.writeFieldBegin(TITLES_FIELD_DESC);
        oprot.writeString(struct.titles);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class WorkDtoTupleSchemeFactory implements SchemeFactory {
    public WorkDtoTupleScheme getScheme() {
      return new WorkDtoTupleScheme();
    }
  }

  private static class WorkDtoTupleScheme extends TupleScheme<WorkDto> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, WorkDto struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetLanguage()) {
        optionals.set(1);
      }
      if (struct.isSetPublicationType()) {
        optionals.set(2);
      }
      if (struct.isSetPublicationCountry()) {
        optionals.set(3);
      }
      if (struct.isSetSubject()) {
        optionals.set(4);
      }
      if (struct.isSetTitles()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetLanguage()) {
        oprot.writeString(struct.language);
      }
      if (struct.isSetPublicationType()) {
        oprot.writeString(struct.publicationType);
      }
      if (struct.isSetPublicationCountry()) {
        oprot.writeString(struct.publicationCountry);
      }
      if (struct.isSetSubject()) {
        oprot.writeString(struct.subject);
      }
      if (struct.isSetTitles()) {
        oprot.writeString(struct.titles);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, WorkDto struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.language = iprot.readString();
        struct.setLanguageIsSet(true);
      }
      if (incoming.get(2)) {
        struct.publicationType = iprot.readString();
        struct.setPublicationTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.publicationCountry = iprot.readString();
        struct.setPublicationCountryIsSet(true);
      }
      if (incoming.get(4)) {
        struct.subject = iprot.readString();
        struct.setSubjectIsSet(true);
      }
      if (incoming.get(5)) {
        struct.titles = iprot.readString();
        struct.setTitlesIsSet(true);
      }
    }
  }

}

