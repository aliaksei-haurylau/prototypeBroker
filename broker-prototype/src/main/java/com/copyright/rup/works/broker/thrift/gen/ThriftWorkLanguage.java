/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.copyright.rup.works.broker.thrift.gen;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ThriftWorkLanguage implements org.apache.thrift.TBase<ThriftWorkLanguage, ThriftWorkLanguage._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThriftWorkLanguage");

  private static final org.apache.thrift.protocol.TField LANGUAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("language", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField LANGUAGE_ROLE_FIELD_DESC = new org.apache.thrift.protocol.TField("languageRole", org.apache.thrift.protocol.TType.STRING, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ThriftWorkLanguageStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ThriftWorkLanguageTupleSchemeFactory());
  }

  public String language; // required
  public String languageRole; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LANGUAGE((short)1, "language"),
    LANGUAGE_ROLE((short)2, "languageRole");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LANGUAGE
          return LANGUAGE;
        case 2: // LANGUAGE_ROLE
          return LANGUAGE_ROLE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LANGUAGE, new org.apache.thrift.meta_data.FieldMetaData("language", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LANGUAGE_ROLE, new org.apache.thrift.meta_data.FieldMetaData("languageRole", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThriftWorkLanguage.class, metaDataMap);
  }

  public ThriftWorkLanguage() {
  }

  public ThriftWorkLanguage(
    String language,
    String languageRole)
  {
    this();
    this.language = language;
    this.languageRole = languageRole;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ThriftWorkLanguage(ThriftWorkLanguage other) {
    if (other.isSetLanguage()) {
      this.language = other.language;
    }
    if (other.isSetLanguageRole()) {
      this.languageRole = other.languageRole;
    }
  }

  public ThriftWorkLanguage deepCopy() {
    return new ThriftWorkLanguage(this);
  }

  @Override
  public void clear() {
    this.language = null;
    this.languageRole = null;
  }

  public String getLanguage() {
    return this.language;
  }

  public ThriftWorkLanguage setLanguage(String language) {
    this.language = language;
    return this;
  }

  public void unsetLanguage() {
    this.language = null;
  }

  /** Returns true if field language is set (has been assigned a value) and false otherwise */
  public boolean isSetLanguage() {
    return this.language != null;
  }

  public void setLanguageIsSet(boolean value) {
    if (!value) {
      this.language = null;
    }
  }

  public String getLanguageRole() {
    return this.languageRole;
  }

  public ThriftWorkLanguage setLanguageRole(String languageRole) {
    this.languageRole = languageRole;
    return this;
  }

  public void unsetLanguageRole() {
    this.languageRole = null;
  }

  /** Returns true if field languageRole is set (has been assigned a value) and false otherwise */
  public boolean isSetLanguageRole() {
    return this.languageRole != null;
  }

  public void setLanguageRoleIsSet(boolean value) {
    if (!value) {
      this.languageRole = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LANGUAGE:
      if (value == null) {
        unsetLanguage();
      } else {
        setLanguage((String)value);
      }
      break;

    case LANGUAGE_ROLE:
      if (value == null) {
        unsetLanguageRole();
      } else {
        setLanguageRole((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LANGUAGE:
      return getLanguage();

    case LANGUAGE_ROLE:
      return getLanguageRole();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LANGUAGE:
      return isSetLanguage();
    case LANGUAGE_ROLE:
      return isSetLanguageRole();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ThriftWorkLanguage)
      return this.equals((ThriftWorkLanguage)that);
    return false;
  }

  public boolean equals(ThriftWorkLanguage that) {
    if (that == null)
      return false;

    boolean this_present_language = true && this.isSetLanguage();
    boolean that_present_language = true && that.isSetLanguage();
    if (this_present_language || that_present_language) {
      if (!(this_present_language && that_present_language))
        return false;
      if (!this.language.equals(that.language))
        return false;
    }

    boolean this_present_languageRole = true && this.isSetLanguageRole();
    boolean that_present_languageRole = true && that.isSetLanguageRole();
    if (this_present_languageRole || that_present_languageRole) {
      if (!(this_present_languageRole && that_present_languageRole))
        return false;
      if (!this.languageRole.equals(that.languageRole))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_language = true && (isSetLanguage());
    builder.append(present_language);
    if (present_language)
      builder.append(language);

    boolean present_languageRole = true && (isSetLanguageRole());
    builder.append(present_languageRole);
    if (present_languageRole)
      builder.append(languageRole);

    return builder.toHashCode();
  }

  public int compareTo(ThriftWorkLanguage other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ThriftWorkLanguage typedOther = (ThriftWorkLanguage)other;

    lastComparison = Boolean.valueOf(isSetLanguage()).compareTo(typedOther.isSetLanguage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLanguage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.language, typedOther.language);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLanguageRole()).compareTo(typedOther.isSetLanguageRole());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLanguageRole()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.languageRole, typedOther.languageRole);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ThriftWorkLanguage(");
    boolean first = true;

    sb.append("language:");
    if (this.language == null) {
      sb.append("null");
    } else {
      sb.append(this.language);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("languageRole:");
    if (this.languageRole == null) {
      sb.append("null");
    } else {
      sb.append(this.languageRole);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ThriftWorkLanguageStandardSchemeFactory implements SchemeFactory {
    public ThriftWorkLanguageStandardScheme getScheme() {
      return new ThriftWorkLanguageStandardScheme();
    }
  }

  private static class ThriftWorkLanguageStandardScheme extends StandardScheme<ThriftWorkLanguage> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ThriftWorkLanguage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LANGUAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.language = iprot.readString();
              struct.setLanguageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LANGUAGE_ROLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.languageRole = iprot.readString();
              struct.setLanguageRoleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ThriftWorkLanguage struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.language != null) {
        oprot.writeFieldBegin(LANGUAGE_FIELD_DESC);
        oprot.writeString(struct.language);
        oprot.writeFieldEnd();
      }
      if (struct.languageRole != null) {
        oprot.writeFieldBegin(LANGUAGE_ROLE_FIELD_DESC);
        oprot.writeString(struct.languageRole);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ThriftWorkLanguageTupleSchemeFactory implements SchemeFactory {
    public ThriftWorkLanguageTupleScheme getScheme() {
      return new ThriftWorkLanguageTupleScheme();
    }
  }

  private static class ThriftWorkLanguageTupleScheme extends TupleScheme<ThriftWorkLanguage> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ThriftWorkLanguage struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetLanguage()) {
        optionals.set(0);
      }
      if (struct.isSetLanguageRole()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetLanguage()) {
        oprot.writeString(struct.language);
      }
      if (struct.isSetLanguageRole()) {
        oprot.writeString(struct.languageRole);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ThriftWorkLanguage struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.language = iprot.readString();
        struct.setLanguageIsSet(true);
      }
      if (incoming.get(1)) {
        struct.languageRole = iprot.readString();
        struct.setLanguageRoleIsSet(true);
      }
    }
  }

}

