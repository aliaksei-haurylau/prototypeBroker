/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.copyright.rup.works.broker.thrift.gen;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ThriftWork implements org.apache.thrift.TBase<ThriftWork, ThriftWork._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThriftWork");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField AUTHORS_FIELD_DESC = new org.apache.thrift.protocol.TField("authors", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField COLLECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("collection", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField WORK_LANGUAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("workLanguage", org.apache.thrift.protocol.TType.STRUCT, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ThriftWorkStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ThriftWorkTupleSchemeFactory());
  }

  public String id; // required
  public List<ThriftAuthor> authors; // required
  public ThriftWorkCollection collection; // required
  public ThriftWorkLanguage workLanguage; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    AUTHORS((short)2, "authors"),
    COLLECTION((short)3, "collection"),
    WORK_LANGUAGE((short)4, "workLanguage");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // AUTHORS
          return AUTHORS;
        case 3: // COLLECTION
          return COLLECTION;
        case 4: // WORK_LANGUAGE
          return WORK_LANGUAGE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AUTHORS, new org.apache.thrift.meta_data.FieldMetaData("authors", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftAuthor.class))));
    tmpMap.put(_Fields.COLLECTION, new org.apache.thrift.meta_data.FieldMetaData("collection", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftWorkCollection.class)));
    tmpMap.put(_Fields.WORK_LANGUAGE, new org.apache.thrift.meta_data.FieldMetaData("workLanguage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftWorkLanguage.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThriftWork.class, metaDataMap);
  }

  public ThriftWork() {
  }

  public ThriftWork(
    String id,
    List<ThriftAuthor> authors,
    ThriftWorkCollection collection,
    ThriftWorkLanguage workLanguage)
  {
    this();
    this.id = id;
    this.authors = authors;
    this.collection = collection;
    this.workLanguage = workLanguage;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ThriftWork(ThriftWork other) {
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetAuthors()) {
      List<ThriftAuthor> __this__authors = new ArrayList<ThriftAuthor>();
      for (ThriftAuthor other_element : other.authors) {
        __this__authors.add(new ThriftAuthor(other_element));
      }
      this.authors = __this__authors;
    }
    if (other.isSetCollection()) {
      this.collection = new ThriftWorkCollection(other.collection);
    }
    if (other.isSetWorkLanguage()) {
      this.workLanguage = new ThriftWorkLanguage(other.workLanguage);
    }
  }

  public ThriftWork deepCopy() {
    return new ThriftWork(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.authors = null;
    this.collection = null;
    this.workLanguage = null;
  }

  public String getId() {
    return this.id;
  }

  public ThriftWork setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public int getAuthorsSize() {
    return (this.authors == null) ? 0 : this.authors.size();
  }

  public java.util.Iterator<ThriftAuthor> getAuthorsIterator() {
    return (this.authors == null) ? null : this.authors.iterator();
  }

  public void addToAuthors(ThriftAuthor elem) {
    if (this.authors == null) {
      this.authors = new ArrayList<ThriftAuthor>();
    }
    this.authors.add(elem);
  }

  public List<ThriftAuthor> getAuthors() {
    return this.authors;
  }

  public ThriftWork setAuthors(List<ThriftAuthor> authors) {
    this.authors = authors;
    return this;
  }

  public void unsetAuthors() {
    this.authors = null;
  }

  /** Returns true if field authors is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthors() {
    return this.authors != null;
  }

  public void setAuthorsIsSet(boolean value) {
    if (!value) {
      this.authors = null;
    }
  }

  public ThriftWorkCollection getCollection() {
    return this.collection;
  }

  public ThriftWork setCollection(ThriftWorkCollection collection) {
    this.collection = collection;
    return this;
  }

  public void unsetCollection() {
    this.collection = null;
  }

  /** Returns true if field collection is set (has been assigned a value) and false otherwise */
  public boolean isSetCollection() {
    return this.collection != null;
  }

  public void setCollectionIsSet(boolean value) {
    if (!value) {
      this.collection = null;
    }
  }

  public ThriftWorkLanguage getWorkLanguage() {
    return this.workLanguage;
  }

  public ThriftWork setWorkLanguage(ThriftWorkLanguage workLanguage) {
    this.workLanguage = workLanguage;
    return this;
  }

  public void unsetWorkLanguage() {
    this.workLanguage = null;
  }

  /** Returns true if field workLanguage is set (has been assigned a value) and false otherwise */
  public boolean isSetWorkLanguage() {
    return this.workLanguage != null;
  }

  public void setWorkLanguageIsSet(boolean value) {
    if (!value) {
      this.workLanguage = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case AUTHORS:
      if (value == null) {
        unsetAuthors();
      } else {
        setAuthors((List<ThriftAuthor>)value);
      }
      break;

    case COLLECTION:
      if (value == null) {
        unsetCollection();
      } else {
        setCollection((ThriftWorkCollection)value);
      }
      break;

    case WORK_LANGUAGE:
      if (value == null) {
        unsetWorkLanguage();
      } else {
        setWorkLanguage((ThriftWorkLanguage)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case AUTHORS:
      return getAuthors();

    case COLLECTION:
      return getCollection();

    case WORK_LANGUAGE:
      return getWorkLanguage();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case AUTHORS:
      return isSetAuthors();
    case COLLECTION:
      return isSetCollection();
    case WORK_LANGUAGE:
      return isSetWorkLanguage();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ThriftWork)
      return this.equals((ThriftWork)that);
    return false;
  }

  public boolean equals(ThriftWork that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_authors = true && this.isSetAuthors();
    boolean that_present_authors = true && that.isSetAuthors();
    if (this_present_authors || that_present_authors) {
      if (!(this_present_authors && that_present_authors))
        return false;
      if (!this.authors.equals(that.authors))
        return false;
    }

    boolean this_present_collection = true && this.isSetCollection();
    boolean that_present_collection = true && that.isSetCollection();
    if (this_present_collection || that_present_collection) {
      if (!(this_present_collection && that_present_collection))
        return false;
      if (!this.collection.equals(that.collection))
        return false;
    }

    boolean this_present_workLanguage = true && this.isSetWorkLanguage();
    boolean that_present_workLanguage = true && that.isSetWorkLanguage();
    if (this_present_workLanguage || that_present_workLanguage) {
      if (!(this_present_workLanguage && that_present_workLanguage))
        return false;
      if (!this.workLanguage.equals(that.workLanguage))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_id = true && (isSetId());
    builder.append(present_id);
    if (present_id)
      builder.append(id);

    boolean present_authors = true && (isSetAuthors());
    builder.append(present_authors);
    if (present_authors)
      builder.append(authors);

    boolean present_collection = true && (isSetCollection());
    builder.append(present_collection);
    if (present_collection)
      builder.append(collection);

    boolean present_workLanguage = true && (isSetWorkLanguage());
    builder.append(present_workLanguage);
    if (present_workLanguage)
      builder.append(workLanguage);

    return builder.toHashCode();
  }

  public int compareTo(ThriftWork other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ThriftWork typedOther = (ThriftWork)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuthors()).compareTo(typedOther.isSetAuthors());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthors()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authors, typedOther.authors);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCollection()).compareTo(typedOther.isSetCollection());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCollection()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collection, typedOther.collection);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWorkLanguage()).compareTo(typedOther.isSetWorkLanguage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWorkLanguage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workLanguage, typedOther.workLanguage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ThriftWork(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("authors:");
    if (this.authors == null) {
      sb.append("null");
    } else {
      sb.append(this.authors);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("collection:");
    if (this.collection == null) {
      sb.append("null");
    } else {
      sb.append(this.collection);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("workLanguage:");
    if (this.workLanguage == null) {
      sb.append("null");
    } else {
      sb.append(this.workLanguage);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ThriftWorkStandardSchemeFactory implements SchemeFactory {
    public ThriftWorkStandardScheme getScheme() {
      return new ThriftWorkStandardScheme();
    }
  }

  private static class ThriftWorkStandardScheme extends StandardScheme<ThriftWork> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ThriftWork struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // AUTHORS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.authors = new ArrayList<ThriftAuthor>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  ThriftAuthor _elem2; // required
                  _elem2 = new ThriftAuthor();
                  _elem2.read(iprot);
                  struct.authors.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setAuthorsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COLLECTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.collection = new ThriftWorkCollection();
              struct.collection.read(iprot);
              struct.setCollectionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // WORK_LANGUAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.workLanguage = new ThriftWorkLanguage();
              struct.workLanguage.read(iprot);
              struct.setWorkLanguageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ThriftWork struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.authors != null) {
        oprot.writeFieldBegin(AUTHORS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.authors.size()));
          for (ThriftAuthor _iter3 : struct.authors)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.collection != null) {
        oprot.writeFieldBegin(COLLECTION_FIELD_DESC);
        struct.collection.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.workLanguage != null) {
        oprot.writeFieldBegin(WORK_LANGUAGE_FIELD_DESC);
        struct.workLanguage.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ThriftWorkTupleSchemeFactory implements SchemeFactory {
    public ThriftWorkTupleScheme getScheme() {
      return new ThriftWorkTupleScheme();
    }
  }

  private static class ThriftWorkTupleScheme extends TupleScheme<ThriftWork> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ThriftWork struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetAuthors()) {
        optionals.set(1);
      }
      if (struct.isSetCollection()) {
        optionals.set(2);
      }
      if (struct.isSetWorkLanguage()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetAuthors()) {
        {
          oprot.writeI32(struct.authors.size());
          for (ThriftAuthor _iter4 : struct.authors)
          {
            _iter4.write(oprot);
          }
        }
      }
      if (struct.isSetCollection()) {
        struct.collection.write(oprot);
      }
      if (struct.isSetWorkLanguage()) {
        struct.workLanguage.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ThriftWork struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.authors = new ArrayList<ThriftAuthor>(_list5.size);
          for (int _i6 = 0; _i6 < _list5.size; ++_i6)
          {
            ThriftAuthor _elem7; // required
            _elem7 = new ThriftAuthor();
            _elem7.read(iprot);
            struct.authors.add(_elem7);
          }
        }
        struct.setAuthorsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.collection = new ThriftWorkCollection();
        struct.collection.read(iprot);
        struct.setCollectionIsSet(true);
      }
      if (incoming.get(3)) {
        struct.workLanguage = new ThriftWorkLanguage();
        struct.workLanguage.read(iprot);
        struct.setWorkLanguageIsSet(true);
      }
    }
  }

}

