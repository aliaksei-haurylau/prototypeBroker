def srcPath = 'src\\main\\java'
def resPath = 'src\\main\\resources'

sourceSets {
    main {
        java.srcDir(srcPath)
        resources.srcDir(resPath)
        thrift = 'src/main/thrift'
    }
}

// Versions of artifacts
camelVersion = '2.9.1'
activemqVersion = '5.5.1'
cxfVersion = '2.5.2'
xbeanVersion = '3.9'
thriftVersion = '0.8.0'

dependencies {
    compile "org.apache.activemq:activemq-core:${activemqVersion}",
            "org.apache.activemq:activemq-camel:${activemqVersion}",
            "org.apache.thrift:libthrift:${thriftVersion}",

            //"org.apache.xbean:xbean-spring:${xbeanVersion}",

            //"org.apache.cxf:cxf-rt-transports-http-jetty:${cxfVersion}",

            //"org.apache.camel:camel-core:${camelVersion}",
            //"org.apache.camel:camel-spring:${camelVersion}",
            //"org.apache.camel:camel-cxf:${camelVersion}",
            //"org.apache.camel:camel-jms:${camelVersion}",
            //"org.apache.camel:camel-xstream:${camelVersion}",

            //Library for marshaling
            'com.fasterxml.jackson.core:jackson-databind:2.0.0',
            'com.thoughtworks.xstream:xstream:1.4.2',
            'org.apache.commons:commons-lang3:3.1',
            'com.google.code.gson:gson:2.1',
            'org.codehaus.jettison:jettison:1.3.1',

            'log4j:log4j:1.2.16',
            'org.perf4j:perf4j:0.9.16',
            'org.slf4j:slf4j-log4j12:1.6.4'

    testCompile "org.apache.camel:camel-test:${camelVersion}"
}

task runClient(type: JavaExec, dependsOn: classes) {
    description = 'Run client (if server is not running, task will be failed)'
    main = 'com.copyright.rup.works.broker.Client'
    classpath sourceSets.main.output.classesDir
    classpath sourceSets.main.resources.srcDirs
    classpath configurations.runtime
}

task runXStream(type: JavaExec, dependsOn: classes) {
    description = 'Runs xstream client'
    main = 'com.copyright.rup.works.broker.clients.XstreamClient'
    classpath sourceSets.main.output.classesDir
    classpath sourceSets.main.resources.srcDirs
    classpath configurations.runtime
}

task runGson(type: JavaExec, dependsOn: classes) {
    description = 'Runs gson client'
    main = 'com.copyright.rup.works.broker.clients.GsonClient'
    classpath sourceSets.main.output.classesDir
    classpath sourceSets.main.resources.srcDirs
    classpath configurations.runtime
}

task runJackson(type: JavaExec, dependsOn: classes) {
    description = 'Runs jackson client'
    main = 'com.copyright.rup.works.broker.clients.JacksonClient'
    classpath sourceSets.main.output.classesDir
    classpath sourceSets.main.resources.srcDirs
    classpath configurations.runtime
}

task runJaxb(type: JavaExec, dependsOn: classes) {
    description = 'Runs Jaxb clien'
    main = 'com.copyright.rup.works.broker.clients.JaxbClient'
    classpath sourceSets.main.output.classesDir
    classpath sourceSets.main.resources.srcDirs
    classpath configurations.runtime
}

task runThrift(type: JavaExec, dependsOn: classes) {
    description = 'Runs trift client'
    main = 'com.copyright.rup.works.broker.clients.ThriftClient'
    classpath sourceSets.main.output.classesDir
    classpath sourceSets.main.resources.srcDirs
    classpath configurations.runtime
}

task generateThrift << {
    thriftFiles = fileTree(dir: "${sourceSets.main.thrift}").matching { include '**/*.thrift' }
    exec {
        executable = 'thrift'
        args = [
            '--gen',
            'java:hashcode',
            '-out',
            "${projectDir}\\${srcPath}",
            thriftFiles.collect { relativePath(it) }.join(",")
        ]
    }
}
generateThrift.description = 'Generates Thrift classes'

jar {
    manifest {
        attributes("Main-Class":"com.copyright.rup.works.broker.Client",
                "Implementation-Title": project.name,
                "Implementation-Version" : version)
    }
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

checkstyleMain {
    exclude(['**/copyright/rup/works/broker/thrift/**/*', '**/copyright/rup/works/domain/**/*'])
}

findbugsMain {
    exclude(['**/copyright/rup/works/broker/thrift/**/*', '**/copyright/rup/works/domain/**/*'])
}

pmdMain {
    exclude(['**/copyright/rup/works/broker/thrift/**/*', '**/copyright/rup/works/domain/**/*'])
}